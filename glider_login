#!/usr/bin/tcsh
## 
## Copyright (c) 2022, 2023 by University of Washington.  All rights reserved.
##
## This file contains proprietary information and remains the 
## unpublished property of the University of Washington. Use, disclosure,
## or reproduction is prohibited except as permitted by express written
## license agreement with the University of Washington.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
## ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
##

# A glider just logged in
# NOTE: Ensure this and the .login file do not contain hidden ^M's or things will fail

umask 2

# Ensure we have a comm.log file
touch comm.log

if(! $?PYTHON_BINARY ) then
    set PYTHON_BINARY = /usr/local/bin/python3.9
endif
set runner_timeout = 2

if(! $?BASESTATION_PATH ) then
    set BASESTATION_PATH = "/usr/local/basestation"
endif

printf "\n" >>! glider_early_gps.log
printf "\n" >>! glider_early_gps.log

set glider_early_gps_time = `date +%y%m%d%H%M%S`
set glider_early_gps_cmd_line = "GliderEarlyGPS.py --daemon --mission_dir `pwd` --verbose --base_log `pwd`/glider_early_gps_${glider_early_gps_time} --csh_pid $$"
set glider_early_gps_log = `pwd`/glider_early_gps.log
if( $?RUNNER_DIR ) then
  set glider_early_gps_run_file = ${RUNNER_DIR}/${glider_early_gps_time}.run
  echo  `pwd` ${glider_early_gps_log} ${glider_early_gps_cmd_line} > ${glider_early_gps_run_file}
  set t_now = `date +%s`
  while (-f ${glider_early_gps_run_file} )
      sleep 0.2
      if ( `date +%s` >= ${t_now} + ${runner_timeout}) then
          break
      endif
  end
else
    $PYTHON_BINARY $BASESTATION_PATH/${glider_early_gps_cmd_line} >>&! ${glider_early_gps_log}
endif

if (-f .connected) then
     echo Reconnected at `date +"%a %b %d %R:%S %Z %Y"` >> comm.log
else
     echo Connected at `date +"%a %b %d %R:%S %Z %Y"` >> comm.log
endif

rm -f .connected
touch .connected

# If set in the .cshrc (basestation simulators), honor that value for autologout
if( $?AUTOLOGOUT_GLIDER ) then
     # To catch hanging shells
     set autologout=$AUTOLOGOUT_GLIDER
else
     set autologout=3
endif

# Signal the glider what files are waiting for upload
set base_login_time = `date +%y%m%d%H%M%S`
set base_login_cmd_line = "BaseLogin.py --mission_dir `pwd` --verbose --base_log `pwd`/baselog_login_${base_login_time}"
set base_login_log = `pwd`/baselog.log

if( $?RUNNER_DIR ) then
  set base_login_run_file = ${RUNNER_DIR}/${base_login_time}.run
  echo `pwd` ${base_login_log} ${base_login_cmd_line} > ${base_login_run_file}
  set t_now = `date +%s`
  while (-f ${base_login_run_file} )
      sleep 0.2
      if ( `date +%s` >= ${t_now} + ${runner_timeout}) then
          break
      endif
  end
else
    $PYTHON_BINARY $BASESTATION_PATH/${base_login_cmd_line}  >>&!  ${base_login_log}
endif
if ( -f upload_files ) then
   source upload_files
   rm -f upload_files
endif

# NOTE: Ensure /usr/local/bin is before /usr/bin
