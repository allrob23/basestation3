#!/usr/bin/python3

## Copyright (c) 2023  University of Washington.
## 
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
## 
## 1. Redistributions of source code must retain the above copyright notice, this
##    list of conditions and the following disclaimer.
## 
## 2. Redistributions in binary form must reproduce the above copyright notice,
##    this list of conditions and the following disclaimer in the documentation
##    and/or other materials provided with the distribution.
## 
## 3. Neither the name of the University of Washington nor the names of its
##    contributors may be used to endorse or promote products derived from this
##    software without specific prior written permission.
## 
## THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF WASHINGTON AND CONTRIBUTORS “AS
## IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF WASHINGTON OR CONTRIBUTORS BE
## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
## GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
## LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
## OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this is a simple version of validate that is not as
# feature aware as the version distributed along 
# with glider binaries. Particularly, it does not warn
# about parameter values and is more sensitive to 
# proper selection of the logfile used as the reference

import sys
import os

if len(sys.argv) != 4:
    print("usage: validate logfile [-c|-s|-t] file_to_validate")
    sys.exit(1)

if sys.argv[1] != '-' and os.path.exists(sys.argv[1]):
    log   = open(sys.argv[1], "r")
else:
    log = None

which = sys.argv[2]

f     = open(sys.argv[3], "r")

curr = {}
if log:
    for line in log:
        line = line.strip()
        if line[0] == '$' and len(line.split(',')) == 2:
            curr.update( { line.split(',')[0]: line.split(',')[1] } )     

    log.close()

errors = 0
if which == "-c": # cmdfile
    directives = ['$GO', '$QUIT', '$RESUME', '$EXIT_TO_MENU']
    directive = None

    linenum = 0
    for line in f:
        linenum = linenum + 1
        line = line.strip()
        if line in directives:
            directive = line
            continue

        if line[0] == '$' and len(line.split(',')) == 2:
            pcs = line.split(',')
            if log and pcs[0] not in curr:
                print(f"unknown parameter {pcs[0]}")
                errors = errors + 1         
                continue
 
            if not log:
                print(f"value of {pcs[0]} will be set to {pcs[1]}")
            elif abs(float(pcs[1]) - float(curr[pcs[0]])) > 1e-5:
                print(f"value of {pcs[0]} will change from {float(curr[pcs[0]])} to {float(pcs[1])}")

            
        elif line[0] == '/': # comment
            continue         
    
        else:
            print(f"unknown content line {linenum}")
            errors = errors + 1  

    if not directive:
        print("no directive given")
        errors = errors + 1
    elif directive == '$GO':
        print("$GO given - will continue in current mode")
    elif directive == '$RESUME':
        print("$RESUME given - will start or continue diving")
    elif directive == '$QUIT':
        print("$QUIT given - will enter or continue in recovery")

elif which == "-t": # targets
    linenum = 0
    targets = []
    for line in f:
        linenum = linenum + 1
        if line[0] == '/':
            continue

        
        pcs = line.split()
        if len(pcs) < 3:
            print(f"parse error line {linenum}")
            errors = errors + 1
            continue
 
        name = pcs[0]
        target = { "name": name }
        for x in pcs[1:]:
            flds = x.split('=')
            if len(flds) != 2:
                print(f"parse error line {linenum}")
                errors = errors + 1            

            target[flds[0]] = flds[1] 
            
        if 'lat' in target and 'lon' in target and 'radius' in target and 'goto' in target:
            targets.append(target)
        elif 'head' in target and 'goto' in target:
            targets.append(target) 
        else:
            print(f"target {name} is missing required fields")
            errors = errors + 1

    currTarget = None
    if errors == 0:
        for t in targets:
            match = False
            for g in targets:
                if t['goto'] == g['name']:
                    match = True
                    break

            if match == False:
                print(f"invalid goto on target {t['name']}")
                errors = errors + 1 
    
            if '$TGT_NAME' in curr and t['name'] == curr['$TGT_NAME']:
                currTarget = t

    if errors == 0:
        for t in targets:
            if currTarget and t['name'] == currTarget['name']: 
                print(f" => {t['name']}", end='')
            else:
                print(f"    {t['name']}", end='')

            for fld in t.keys():
                if fld != 'name':
                    print(f" {fld}={t[fld]}", end='')
        
            print('')


elif which == '-s':
    linenum = 0
    specs = []
    sensors = 0
    for i in range(1,7):
        d = f'$DEVICE{i}'
        if d in curr and float(curr[d]) > -1:
            sensors = sensors + 1

    for line in f:
        linenum = linenum + 1
        if line[0] == '/':
            continue

        # Rev E
        if '=' in line:
            pcs = line.split()
            if len(pcs) < 4:
                print(f"parse error line {linenum}")
                errors = errors + 1
                continue

            depth = pcs[0]
            if depth != 'loiter':
                try:
                    d = float(depth)
                except ValueError:
                    print("invalid depth bin spec")
                    errors = errors + 1
                    continue

            spec = { "depth": depth }
            for x in pcs[1:]:
                flds = x.split('=')
                if len(flds) != 2:
                    print(f"parse error line {linenum}")
                    errors = errors + 1            

                spec[flds[0]] = flds[1] 
                
        # assume Rev B
        else:
            pcs = line.split()
            if len(pcs) != 4:
                print(f"parse error line {linenum}")
                errors = errors + 1
                continue

            try:
                depth = float(pcs[0])
            except ValueError:
                print("invalid depth bin spec")
                errors = errors + 1
                continue

            spec = { "depth": depth, "seconds": pcs[1], "sensors": pcs[2], "gc": pcs[3] }

        if not ('sensors' in spec and 'gc' in spec and 'seconds' in spec):
            print(f"spec {depth} is missing required fields (seconds, sensors, gc)")
            errors = errors + 1
            continue

        if sensors > 0 and len(spec['sensors']) != sensors:
            print(f"not enough sensors specified for {depth} (have {len(spec['sensors'])}, need {sensors})")
            errors = errors + 1
            continue

        specs.append(spec)

    if errors == 0:
        for s in specs:
            print(f"  {s['depth']}", end='')
            for fld in s.keys():
                if fld != 'depth':
                    print(f" {fld}={s[fld]}", end='')
            
            print('') 

else:
    print("usage: validate logfile [-c|-s|-t] file_to_validate")
    errors = 1
 
sys.exit(errors)
